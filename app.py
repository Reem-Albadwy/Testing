# ✅ مكتبة واجهة التطبيق
import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from PIL import Image
import os, io, base64
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.lib import colors

# ✅ إعداد الخلفية المخصصة
def set_background(image_path):
    with open(image_path, "rb") as file:
        encoded = base64.b64encode(file.read()).decode()
    css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/png;base64,{encoded}");
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

set_background("background.png")  # الصورة المرفوعة مع الريبو

# ✅ تحميل الموديل
@st.cache_resource
def load_model():
    model_path = "SavedModel_format"
    return tf.saved_model.load(model_path)

model = load_model()
infer = model.signatures["serving_default"]

# ✅ أسماء الكلاسات والوصف
class_names = ['CaS', 'CoS', 'Gum', 'MC', 'OC', 'OLP', 'OT']
disease_info = {
    "OLP": "Oral Lichen Planus is a chronic condition affecting the mouth.",
    "MC": "Mucosal condition often related to irritation or trauma.",
    "Gum": "Gum disease involves inflammation that affects the tissues around teeth.",
    "CoS": "Condition of soft tissues, sometimes caused by infection.",
    "OT": "Other minor oral tissue issues.",
    "CaS": "Caries symptoms are related to tooth decay and infection.",
    "OC": "Oral cancer may develop in any part of the mouth."
}

# ✅ إعداد واجهة Streamlit
st.set_page_config(page_title="Teeth Classifier", page_icon="🦷")
st.markdown("""
<h1 style='text-align:center; color:#004080; font-family:sans-serif;'>🦷 Smart Teeth Disease Classifier</h1>
<p style='text-align:center; color:#333;'>Upload a teeth image below to predict the disease and download a detailed PDF report.</p>
""", unsafe_allow_html=True)

# ✅ إدخال اسم المريض
patient_name = st.text_input("👤 Enter patient name:")

# ✅ رفع الصورة
uploaded_file = st.file_uploader("📸 Upload Image", type=["jpg", "jpeg", "png"])

if uploaded_file and patient_name:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="Uploaded Image", use_column_width=True)
    img_resized = img.resize((224, 224))
    img_array = image.img_to_array(img_resized) / 255.0
    img_array = np.expand_dims(img_array, axis=0).astype(np.float32)

    predictions = infer(tf.convert_to_tensor(img_array))
    probs = list(predictions.values())[0].numpy()[0]

    pred_class = class_names[np.argmax(probs)]
    confidence = float(np.max(probs)) * 100

    st.success(f"🩺 Prediction: {pred_class}")
    st.info(f"Confidence: {confidence:.2f}%")

    with st.expander("🧾 Learn more"):
        st.write(f"**{pred_class}**: {disease_info.get(pred_class)}")
        search_url = f"https://www.google.com/search?q=oral+disease+{pred_class}"
        st.markdown(f"[🔍 Search about this condition]({search_url})")

    # ✅ توليد تقرير PDF بتنسيق جميل
    def create_report(name, pred, conf, desc):
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        custom_title = ParagraphStyle(name='CenterTitle', fontSize=20, textColor=colors.HexColor('#004080'), alignment=TA_CENTER)
        normal = styles['Normal']
        normal.fontName = 'Helvetica'
        normal.fontSize = 12

        elements = [
            Paragraph("Teeth Disease Diagnostic Report", custom_title),
            Spacer(1, 20),
            Paragraph(f"👤 <b>Patient Name:</b> {name}", normal),
            Paragraph(f"📅 <b>Date:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}", normal),
            Spacer(1, 12),
            Paragraph(f"🩺 <b>Prediction:</b> <font color='red'>{pred}</font>", normal),
            Paragraph(f"📊 <b>Confidence:</b> {conf:.2f}%", normal),
            Spacer(1, 12),
            Paragraph(f"🧾 <b>Description:</b> {desc}", normal),
            Spacer(1, 20),
            Paragraph("<font size=9 color=gray>This report was auto-generated by an AI-powered diagnosis tool.</font>", normal)
        ]
        doc.build(elements)
        buffer.seek(0)
        return buffer

    pdf_buffer = create_report(patient_name, pred_class, confidence, disease_info[pred_class])

    st.download_button("⬇️ Download PDF Report", data=pdf_buffer, file_name="teeth_report.pdf", mime="application/pdf")
